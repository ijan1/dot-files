source ~/.vim/plugins.vim
source ~/.vim/cscope_maps.vim

" Enable filetype plugins (~/.vim/ftplugin)
filetype plugin on

let mapleader = ","

" Source Vim configuration file and install plugins
nnoremap <silent><leader>1 :source ~/.vim/vimrc \| PlugUpdate<CR>

" enable highlight search
set hlsearch

" clear highlight on escape/escape
nnoremap <esc><esc> :noh<return>
" clear the screen once you exit vim
au VimLeave * :!clear

" disable auto commenting
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" automatically enable case sensitive when search has uppercase letter
set ignorecase
set smartcase

" show line number on side
set number
set relativenumber
set cursorline

" Display a line at Column 81
set textwidth=80
set colorcolumn=+1

" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

set history=200		" keep 200 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set wildmenu		" display completion matches in a status line

set ttimeout		" time out for key codes
set ttimeoutlen=100	" wait up to 100ms after Esc for special key

" Remove trailing whitespace on write
autocmd BufWritePre * :%s/\s\+$//e

" Adds support for clang-format. Requires clang to be installed
map <C-K> :py3f ~/.vim/clang-format.py<cr>

" Persistent undo across sessions
set undodir=~/.vim/undo_files
set undofile
set viminfo='50,<1000,s100,:0,n~/.vim/viminfo

packadd termdebug " Enable Termdebug/gdb
let g:termdebug_wide=1 " Display source code on the right
noremap <silent> <leader>td :Termdebug<cr>

noremap <silent> <leader>l : tabnew<cr>
noremap <silent> <leader>n : tabn<cr>
noremap <silent> <leader>p : tabp<cr>

noremap <silent> <leader>ss : mksession! ~/.vim/sessions/<cr>
noremap <silent> <leader>sl : source ~/.vim/sessions/<cr>

if has("autocmd")
  " Highlight TODO, FIXME, NOTE, etc.
  if v:version > 701
    autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\)')
    autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\)')
  endif
endif

" jump to the previous function
nnoremap <silent> [f :call
\ search('\(\(if\\|for\\|while\\|switch\\|catch\)\_s*\)\@64<!(\_[^)]*)\_[^;{}()]*\zs{', "bw")<CR>
" jump to the next function
nnoremap <silent> ]f :call
\ search('\(\(if\\|for\\|while\\|switch\\|catch\)\_s*\)\@64<!(\_[^)]*)\_[^;{}()]*\zs{', "w")<CR>

